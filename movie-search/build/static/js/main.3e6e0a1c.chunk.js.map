{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","store/reducer/index.js","image/giphy.gif","components/App.js","index.js"],"names":["refreshPage","window","location","reload","Header","props","className","onClick","text","Movie","movie","poster","Poster","Title","width","height","src","alt","Year","Search","search","useState","searchValue","setSearchValue","onChange","e","target","value","type","preventDefault","initialState","loading","movies","errorMessage","reducer","state","action","payload","error","App","useReducer","dispatch","useEffect","axios","get","then","result","data","retrivedMovies","spinner","map","index","Response","Error","ReactDOM","render","document","getElementById"],"mappings":"8NAIMA,EAAc,WAChBC,OAAOC,SAASC,UAWLC,EARA,SAACC,GACZ,OACI,qBAAKC,UAAU,aAAf,SACI,oBAAIC,QAASP,EAAb,SAA2BK,EAAMG,UCS9BC,EAdD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACPC,EACe,QAAjBD,EAAME,OAJoB,qGAI2BF,EAAME,OAC/D,OACI,sBAAKN,UAAU,QAAf,UACI,6BAAKI,EAAMG,QACX,gCACI,qBAAKC,MAAM,MAAMC,OAAO,MAAMC,IAAKL,EAAQM,IAAG,4BAAuBP,EAAMG,SAC3E,kCAAKH,EAAMQ,KAAX,cCyBDC,EArCA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEd,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAmBA,OACI,uBAAMjB,UAAU,SAAhB,UACI,uBACIkB,SAnBqB,SAACC,GAC9BF,EAAeE,EAAEC,OAAOC,QAmBhBC,KAAK,OACLD,MAAOL,IAEX,uBACIf,QAfe,SAACkB,GACxBA,EAAEI,iBACFT,EAAOE,GANPC,EAAe,KAoBPK,KAAK,SACLD,MAAM,e,OCjCTG,EAAe,CACxBC,SAAS,EACTC,OAAQ,GACRC,aAAc,MAGLC,EAAU,SAACC,EAAOC,GAC3B,OAAQA,EAAOR,MACX,IAAK,wBACD,OAAO,2BACAO,GADP,IAEIJ,SAAS,EACTE,aAAc,OAEtB,IAAK,wBACD,OAAO,2BACAE,GADP,IAEIJ,SAAS,EACTC,OAAQI,EAAOC,UAEvB,IAAK,wBACD,OAAO,2BACAF,GADP,IAEIJ,SAAS,EACTE,aAAcG,EAAOE,QAE7B,QACI,OAAOH,IC3BJ,MAA0B,kC,gBC8G1BI,EAhGH,WACR,MAA0BC,qBAAWN,EAASJ,GAA9C,mBAAOK,EAAP,KAAcM,EAAd,KAEAC,qBAAU,WACNC,IAAMC,IARQ,uDAQWC,MAAK,SAAAC,GAC1BL,EAAS,CACLb,KAAM,wBACNS,QAASS,EAAOC,KAAK5B,cAG9B,IAEH,IAyDQa,EAAkCG,EAAlCH,OAAQC,EAA0BE,EAA1BF,aAEVe,EAFoCb,EAAZJ,UAGdE,EACR,qBAAK3B,UAAU,UAAUU,IAAKiC,EAAShC,IAAI,oBAC3CgB,EACA,qBAAK3B,UAAU,eAAf,SAA+B2B,IAE/BD,EAAOkB,KAAI,SAACxC,EAAOyC,GAAR,OACP,cAAC,EAAD,CAAuCzC,MAAOA,GAA9C,UAAeyC,EAAf,YAAwBzC,EAAMG,WAI1C,OACI,qBAAKP,UAAU,MAAf,SACI,sBAAKA,UAAU,cAAf,UACI,cAAC,EAAD,CAAQE,KAAK,WACb,cAAC,EAAD,CAAQY,OA1EL,SAAAE,GACXmB,EAAS,CACLb,KAAM,0BAGVe,IAAM,8BAAD,OAA+BrB,EAA/B,qBACAuB,MAAK,SAAAC,GAC2B,SAAzBA,EAAOC,KAAKK,SACZX,EAAS,CACLb,KAAM,wBACNS,QAASS,EAAOC,KAAK5B,SAGzBsB,EAAS,CACLb,KAAM,wBACNU,MAAOQ,EAAOC,KAAKM,cA4D3B,mBAAG/C,UAAU,YAAb,mDACA,qBAAKA,UAAU,SAAf,SAAyB0C,UCjGzCM,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.3e6e0a1c.chunk.js","sourcesContent":["//呈现应用标题，并接受标题属性\r\nimport React from 'react';\r\n\r\n// you can add this to the onClick listener of the Header component\r\nconst refreshPage = () => {\r\n    window.location.reload();\r\n};\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className=\"App-header\">\r\n            <h2 onClick={refreshPage}>{props.text}</h2>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","//渲染每部电影\r\nimport React from 'react';\r\n\r\n//占位符图像\r\nconst DEFAULT_PLACEHOLDER_IMAGE = 'https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg';\r\n\r\nconst Movie = ({ movie }) => {\r\n    const poster =\r\n        movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n    return (\r\n        <div className=\"movie\">\r\n            <h2>{movie.Title}</h2>\r\n            <div>\r\n                <img width=\"200\" height=\"300\" src={poster} alt={`The movie titled: ${movie.Title}`} />\r\n                <p>({movie.Year})</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Movie;","import React, { useState } from 'react';\r\n\r\nconst Search = ({ search }) => {\r\n    //input输入的状态值\r\n    const [searchValue, setSearchValue] = useState('');\r\n\r\n    //更新状态值为input输入的当前状态\r\n    const handleSearchInputChanges = (e) => {\r\n        setSearchValue(e.target.value);\r\n    }\r\n    //重置字段\r\n    const resetInputField = () => {\r\n        setSearchValue('');\r\n    }\r\n\r\n    //包含调用search函数的函数，该函数作为props传递给它\r\n    const callSearchFunction = (e) => {\r\n        e.preventDefault();\r\n        search(searchValue);\r\n        resetInputField();\r\n    }\r\n\r\n    //包含一个带有input元素、搜索button的表单\r\n    return (\r\n        <form className=\"search\">\r\n            <input\r\n                onChange={handleSearchInputChanges}\r\n                type=\"text\"\r\n                value={searchValue}\r\n            />\r\n            <input\r\n                onClick={callSearchFunction}\r\n                type=\"submit\"\r\n                value=\"SEARCH\"\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Search;","export const initialState = {\r\n    loading: true,\r\n    movies: [],\r\n    errorMessage: null\r\n};\r\n\r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"SEARCH_MOVIES_REQUEST\":\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                errorMessage: null\r\n            };\r\n        case \"SEARCH_MOVIES_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                movies: action.payload\r\n            };\r\n        case \"SEARCH_MOVIES_FAILURE\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errorMessage: action.error\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","export default __webpack_public_path__ + \"static/media/giphy.477e76e7.gif\";","//其他三个组件的父组件\r\nimport React, { useReducer, useEffect } from 'react';\r\nimport '../App.css';\r\nimport Header from './Header';\r\nimport Movie from './Movie';\r\nimport Search from './Search';\r\nimport { initialState, reducer } from '../store/reducer';\r\nimport spinner from '../image/giphy.gif';\r\nimport axios from 'axios';\r\n\r\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=princess&apikey=4a3b711b\";\r\n\r\n//使用useReducer函数替代三个有关联的useState函数\r\n\r\nconst App = () => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    useEffect(() => {\r\n        axios.get(MOVIE_API_URL).then(result => {\r\n            dispatch({\r\n                type: \"SEARCH_MOVIES_SUCCESS\",\r\n                payload: result.data.Search\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    const search = searchValue => {\r\n        dispatch({\r\n            type: \"SEARCH_MOVIES_REQUEST\"\r\n        });\r\n\r\n        axios(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\r\n            .then(result => {\r\n                if (result.data.Response === \"True\") {\r\n                    dispatch({\r\n                        type: \"SEARCH_MOVIES_SUCCESS\",\r\n                        payload: result.data.Search\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: \"SEARCH_MOVIES_FAILURE\",\r\n                        error: result.data.Error\r\n                    });\r\n                }\r\n            });\r\n    };\r\n\r\n    // //处理加载状态\r\n    // const [loading, setLoading] = useState(true);\r\n    // //从服务器获取电影数组\r\n    // const [movies, setMovies] = useState([]);\r\n    // //处理在发出 API 请求时可能发生的任何错误\r\n    // const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    // //包含在组件初始呈现期间调用API的函数\r\n    // //ps：副作用是指数据获取、订阅和手动 DOM 操作等\r\n    // useEffect(() => {\r\n    //     fetch(MOVIE_API_URL)\r\n    //         .then(res => res.json())\r\n    //         .then(result => {\r\n    //             setMovies(result.Search);\r\n    //             setLoading(false);\r\n    //         });\r\n    // }, []);\r\n\r\n    // const search = searchValue => {\r\n    //     setLoading(true);\r\n    //     setErrorMessage(null);\r\n\r\n    //     //包含处理API请求的函数\r\n    //     fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\r\n    //         .then(res => res.json())\r\n    //         .then(result => {\r\n    //             if (result.Response === \"True\") {\r\n    //                 setMovies(result.Search);\r\n    //                 setLoading(false);\r\n    //             } else {\r\n    //                 setErrorMessage(result.error);\r\n    //                 setLoading(false);\r\n    //             }\r\n    //         });\r\n    // };\r\n\r\n    const { movies, errorMessage, loading } = state;\r\n\r\n    const retrivedMovies =\r\n        loading && !errorMessage ? (\r\n            <img className=\"loading\" src={spinner} alt=\"Loading spinner\" />\r\n        ) : errorMessage ? (\r\n            <div className=\"errorMessage\">{errorMessage}</div>\r\n        ) : (\r\n            movies.map((movie, index) => (\r\n                <Movie key={`${index}-${movie.Title}`} movie={movie} />\r\n            ))\r\n        )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"m-container\">\r\n                <Header text=\"HOOKED\" />\r\n                <Search search={search} />\r\n                <p className=\"App-intro\">Sharing a few of our favourite movies</p>\r\n                <div className=\"movies\">{retrivedMovies}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App'; //this changed\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}